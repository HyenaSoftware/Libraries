#pragma once

#include <Utility\traits.h>

/*
	instrusive graph implementation
*/

namespace Utility
{
	template<class I> class node
	{
	public:
		typedef I id_type;

		node() : _id{ reinterpret_cast<id_type>(this) } {}

		id_type id() const
		{
			return _id;
		}

		void set_id(id_type id_)
		{
			std::swap(_id, id_);
		}

	private:

		id_type _id;
	};

	define_has_method(add_output_edge);
	define_has_method(add_input_edge);

	template<class I> class edge
	{
	public:
		typedef I id_type;

		edge() : _id{ reinterpret_cast<id_type>(this) } {}

		id_type id() const
		{
			return _id;
		}

		void set_id(id_type id_)
		{
			std::swap(_id, id_);
		}

	private:
		id_type _id;
	};

	using default_node = node<int>;
	using default_edge = edge<int>;

	template<class I> class graph
	{
	public:
		typedef typename node<I>::id_type id_type;
		static_assert(std::is_same<typename node<I>::id_type, typename edge<I>::id_type>::value, "id type of node and edge must be the same.");

		typedef node<I> node_t;
		typedef edge<I> edge_t;

		template<class SN, class E, class DN> void connect(std::shared_ptr<SN> src_n_, std::shared_ptr<E> edge_, std::shared_ptr<DN> dst_n_)
		{
			static_assert(std::is_base_of<node<id_type>, SN>::value, "Type SN must be subtype of node");
			static_assert(std::is_base_of<node<id_type>, DN>::value, "Type DN must be subtype of node");
			static_assert(std::is_base_of<edge<id_type>, E>::value, "Type E must be subtype of edge");

			static_assert(has_method_add_input_edge<SN>::value, "");
			static_assert(has_method_add_output_edge<DN>::value, "");

			Utility::throw_if(src_n_ == nullptr, "source node is not exists.");
			Utility::throw_if(dst_n_ == nullptr, "source node is not exists.");
			Utility::throw_if(edge_ == nullptr, "edge is not exists.");

			src_n_->add_output_edge(edge_);
			dst_n_->add_input_edge(edge_);

			edge_->set_input_node(src_n_);
			edge_->set_output_node(dst_n_);

			_nodes.insert(std::make_pair(src_n_->id(), src_n_));
			_nodes.insert(std::make_pair(dst_n_->id(), dst_n_));
			_edges.insert(std::make_pair(edge_->id(), edge_));
		}

	private:

		std::unordered_map<id_type, std::weak_ptr<edge_t>> _edges;
		std::unordered_map<id_type, std::weak_ptr<node_t>> _nodes;
	};

	using default_graph = graph<int>;
}
