#pragma once

#include "stdafx.h"
#include "rv_abstract_debugger.hpp"
#include "rv_graph.hpp"

namespace reactive_framework8
{
	/*
		forward chainging:
		
		node:a -> op:foreach -> nil
	
		node:a -> op:map ->		node:c
		node:b -> +
	*/

	class rv_builder;
	class rv_context;

	template<class T> class rv
	{
	public:
		rv() = default;

		rv(const rv& other_)
			: _subscribes{ other_._subscribes }
			, _ptr_impl { other_._ptr_impl }
		{
			_ptr_impl->add_owner(*this);
		}

		rv(rv&& other_)
		{
			swap(other_);
		}

		rv(T value_)
		{
			_ptr_impl->set_value(std::move(value_));
		}

		rv(rv_builder builder_)
		{
			builder_.into(*this);
		}

		~rv()
		{
			_ptr_impl->remove_owner(*this);
		}

		rv& operator<<(T value_)
		{
			_ptr_impl->set_value(std::move(value_));

			return *this;
		}

		rv& operator=(T value_)
		{
			_ptr_impl->set_value(std::move(value_));

			return *this;
		}

		rv& operator=(rv_builder builder_)
		{
			builder_.into(*this);

			return *this;
		}

		rv& operator=(rv&& other_)
		{
			swap(other_);

			return *this;
		}

		void swap(rv& other_)
		{
			//
			_subscribes.swap(other_._subscribes);

			//
			_ptr_impl.swap(other_._ptr_impl);

			//
			_ptr_impl->add_owner(*this);
			_ptr_impl->remove_owner(other_);

			//
			other_._ptr_impl->add_owner(other_);
			other_._ptr_impl->remove_owner(*this);

		}

		rv& operator=(const rv& other_) = delete;

		void subscribe(std::function<void(T)> callback_)
		{
			_subscribes.push_back(std::move(callback_));
		}

		void notify()
		{
			if (_ptr_impl->value())
			{
				for (auto& f : _subscribes)
				{
					f(*_ptr_impl->value());
				}
			}
		}

		const boost::optional<T>& value() const
		{
			return _ptr_impl->value();
		}

		//private:
		std::shared_ptr<graph::value_node<T>> _ptr_impl = std::make_shared<graph::value_node<T>>(*this);

		std::vector<std::function<void(T)>> _subscribes;
	};



	class rv_builder
	{
	public:
		rv_builder(rv_context& rc_, std::shared_ptr<graph::inotifiable> ptr_op_ = nullptr);

		//	map
		//
		template<class F, class T1, class... Ts> rv_builder map(F func_, rv<T1> rv1_, rv<Ts>... rvs_)
		{
			auto func = utility::as_std_function(func_);

			return _map_impl(std::move(func), rv1_._ptr_impl, rvs_._ptr_impl ...);
		}

		template<class R, class T1, class... Ts> rv_builder map(std::function<R(T1, Ts...)> func_, rv<T1> rv1_, rv<Ts>... rvs_)
		{
			return _map_impl(std::move(func_), rv1_._ptr_impl, rvs_._ptr_impl...);
		}

		//	filter
		//
		template<class F, class T> rv_builder filter(F func_, rv<T> rv_)
		{
			auto func = utility::as_std_function(func_);

			return filter(std::move(func), std::move(rv_));
		}

		template<class T> rv_builder filter(std::function<bool(T)> func_, rv<T> rv_)
		{
			return _filter_impl(std::move(func_), rv_._ptr_impl);
		}

		//	zip
		//
		template<class F, class T, class... Ts> rv_builder zip(F func_, rv<T> rv1_, rv<Ts>... rvs_)
		{
			typedef utility::function_traits<F>::result_type result_type;

			return _map_impl(std::function<result_type(T, Ts...)>(std::forward<F>(func_)),
				rv1_._ptr_impl, rvs_._ptr_impl ...);
		}

		template<class T> rv_builder into(rv<T>& target_)
		{
			auto op = dynamic_pointer_cast<graph::node<T>>(_current_operator);

			if (op)
			{
				target_._ptr_impl->assign(_rc);
				target_._ptr_impl->set_source(*op);

				//op->assign(_rc); it must be okay
				op->assign(target_._ptr_impl);

				_rc.debugger().notify_rv_assigned_to(*target_._ptr_impl);
				_rc.debugger().add_edge_to_value(*op, *target_._ptr_impl);

				target_._ptr_impl->invalidate();
			}

			return *this;
		}

		template<class T> rv<T> as()
		{
			return { *this };
		}

	private:
		std::shared_ptr<graph::inotifiable> _current_operator;
		rv_context& _rc;

		template<class R, class T1, class... Ts> rv_builder _map_impl(std::function<R(T1, Ts...)> func_
			, std::shared_ptr<graph::value_node<T1>>& n1_, std::shared_ptr<graph::value_node<Ts>>&... ns_)
		{
			const auto tpl = std::make_tuple(n1_, ns_...);

			auto ptr_operator = std::make_shared<graph::map_operator_node<R, T1, Ts...>>(std::move(func_), tpl);

			_rc._hold_this_internal_nodes(ptr_operator);

			utility::for_each(tpl, [=](auto ptr_input_)
			{
				_rc._hold_this_internal_nodes(ptr_input_);
				//ptr_operator->set_source(*ptr_input_);

				ptr_input_->assign(_rc);
				ptr_input_->assign(ptr_operator);

				_rc.debugger().notify_rv_assigned_to(*ptr_input_);
				_rc.debugger().notify_new_operator(*ptr_operator);
				_rc.debugger().add_edge_from_value(*ptr_input_, *ptr_operator);
			});

			ptr_operator->assign(_rc);
			ptr_operator->invalidate();

			return { _rc, ptr_operator };
		}

		template<class T> rv_builder _filter_impl(std::function<bool(T)> func_, std::shared_ptr<graph::value_node<T>>& node_)
		{
			auto ptr_operator = std::make_shared<graph::filter_operator_node<T>>(std::move(func_), node_);

			_rc._hold_this_internal_nodes(ptr_operator);
			_rc._hold_this_internal_nodes(node_);

			node_->assign(_rc);
			node_->assign(ptr_operator);

			_rc.debugger().notify_rv_assigned_to(*node_);
			_rc.debugger().notify_new_operator(*ptr_operator);
			_rc.debugger().add_edge_from_value(*node_, *ptr_operator);
			// value_notification is done by the node.set_value

			ptr_operator->assign(_rc);
			ptr_operator->invalidate();

			return{ _rc, ptr_operator };
		}
	};


	//
	//	TODO:
	//	* fix the rv<T>& thing: it should works well even with left- and rightvalues
	//	* make _host_rv as vector<rv<T>*>, because some operation needs to copy
	//	* btw why do we need to move the rvs? why don't move the underlying node rather?
	//

	class rv_context
	{
		friend class rv_builder;
	public:
		class rv_context_impl;

		rv_context();
		~rv_context();


		template<class T> rv_builder from(rv<T> rv_)
		{
			return { };
		}

		//	map
		//
		template<class F, class T1, class... Ts> rv_builder map(F func_, rv<T1> rv1_, rv<Ts>... rvs_)
		{
			return rv_builder { *this }.map(std::move(func_), std::move(rv1_), std::move(rvs_)...);
		}

		template<class R, class T1, class... Ts> rv_builder map(std::function<R(T1, Ts...)> func_, rv<T1> rv1_, rv<Ts>... rvs_)
		{
			return rv_builder{ *this }.map(std::move(func_), std::move(rv1_), std::move(rvs_)...);
		}

		//	filter
		//
		template<class F, class T> rv_builder filter(F func_, rv<T> rv_)
		{
			return rv_builder{ *this }.filter(std::move(func_), std::move(rv_));
		}

		template<class T> rv_builder filter(std::function<bool(T)> func_, rv<T> rv_)
		{
			return rv_builder{ *this }.filter(std::move(func_), std::move(rv_));
		}
		
		//	zip
		//
		template<class F, class T, class... Ts> rv_builder zip(F func_, rv<T> rv1_, rv<Ts>... rvs_)
		{
			return rv_builder{ *this }.zip(std::move(func_), std::move(rv1_), std::move(rvs_)...);
		}

		rv_abstract_debugger& debugger();

		void reset_debugger(std::unique_ptr<rv_abstract_debugger>);

		void submit(std::function<void()> task_);

	private:
		void _hold_this_internal_nodes(std::shared_ptr<graph::inotifiable>);

		std::unique_ptr<rv_context_impl> _impl;

		//	1st - allocation 
		//	2nd - deallocation - make sure no other thread keep locked its mutex
		//std::unique_ptr<rv_abstract_debugger> _debugger;

		//	2nd - allocation
		//	1st - deallocation - terminate running threads
		//utility::thread_pool _thread_pool;
	};
}


