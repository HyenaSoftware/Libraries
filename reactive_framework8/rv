#pragma once
#include "stdafx.h"
#include "rv_debugger.hpp"

namespace reactive_framework8
{

	template<class T> T aggregate(std::function<T(T, T)> f_, T&& a_, T&& b_)
	{
		return f_(std::forward<T>(a_), std::forward<T>(b_));
	}

	template<class T, class... Ts> T aggregate(std::function<T(T, T)> f_, T&& a_, T&& b_, Ts&&... ts_)
	{
		return aggregate(f_, aggregate(f_, std::forward<T>(a_), std::forward<T>(b_)), std::forward<Ts>(ts_)...);
	}

	template<class... Ts> bool and(Ts&&... ts_)
	{
		return aggregate<bool>([](bool a_, bool b_)
		{
			return a_ && b_;
		}, std::forward<Ts>(ts_)...);
	}

	template<class... Ts> bool or(Ts&&... ts_)
	{
		return aggregate<bool>([](bool a_, bool b_)
		{
			return a_ || b_;
		}, std::forward<Ts>(ts_)...);
	}


	class flag_mutex
	{
	public:
		inline operator bool() const { return _allow; }

		inline void set() { _allow = false; }
		inline void clear() { _allow = true; }

	private:
		bool _allow = true;
	};

	class flag_lock
	{
	public:
		inline flag_lock(flag_mutex& mtx_) : _mtx { mtx_ }
		{
			_mtx.set();
		}

		inline ~flag_lock()
		{
			_mtx.clear();
		}

	private:
		flag_mutex& _mtx;
	};


	//
	template<class T> class rv;
	template<class T> class underlying_rv;
	class rv_context;
	class rv_builder;

	class rv_abstract_operator : public std::enable_shared_from_this<rv_abstract_operator> { public: virtual void wake_up() = 0; };


	namespace mixins
	{
		template<class... Us> struct inputs
		{
			inputs(std::tuple<std::weak_ptr<underlying_rv<Us>>...> input_nodes_)
				: _input_nodes{ std::move(input_nodes_) }
			{
			}

			std::tuple<std::weak_ptr<underlying_rv<Us>>...> _input_nodes;

			template<size_t N> auto& _get()
			{
				return std::get<N>(_input_nodes).lock()->value();
			}

			template<size_t... Ns> bool _is_ready(std::index_sequence<Ns...>)
			{
				bool any_expired = or(std::get<Ns>(_input_nodes).expired()...);
				if (any_expired)
				{
					return false;
				}

				auto locked_inputs = std::make_tuple(std::get<Ns>(_input_nodes).lock()...);

				return and(std::get<Ns>(locked_inputs)->value().is_initialized()...);
			}
		};

		template<class T> struct inputs<T>
		{
			inputs(std::weak_ptr<underlying_rv<T>> input_nodes_)
				: _input_nodes{ std::move(input_nodes_) }
			{
			}

			std::weak_ptr<underlying_rv<T>> _input_nodes;

			auto& _get()
			{
				std::lock_guard<std::mutex> lock{ _weak_ptr_lock };

				return _input_nodes.lock()->value();
			}

			bool _is_ready()
			{
				std::lock_guard<std::mutex> lock{ _weak_ptr_lock };

				return _input_nodes.lock()->value().is_initialized();
			}
		};

		template<class R> struct output
		{
			void set_output(std::shared_ptr<underlying_rv<R>> ptr_)
			{
				_output_nodes.push_back(std::move(ptr_));
			}

			// it's unsure whatever the target node exists or not
			std::vector<std::weak_ptr<underlying_rv<R>>> _output_nodes;

			template<class Q> void _send(Q value_)
			{
				for (auto& out : _output_nodes)
				{
					auto& node = *out.lock();

					node << value_;
				}
			}
		};
	}


	/*
	*	- join
	*/
	template<class R, class... Us> class rv_aggregate_operator : public rv_abstract_operator
		, public mixins::inputs<Us...>
		, public mixins::output<R>
	{
	public:
		rv_aggregate_operator(std::function<R(Us...)> function_, std::tuple<std::weak_ptr<underlying_rv<Us>>...> input_nodes_)
			: inputs { std::move(input_nodes_) }
			, _function { std::move(function_) }
		{
		}

		void wake_up() override
		{
			std::index_sequence_for<Us...> seq;

			if (_is_ready(seq))
			{
				// thread_pool.submit([] { _apply(seq); });
				_apply(seq);
			}
		}

	private:
		const std::function<R(Us...)> _function;

		template<size_t... Ns> void _apply(std::index_sequence<Ns...>)
		{
			auto val = _function(*_get<Ns>()...);

			_send(std::move(val));
		}

	};

	/*
	*	- concat
	*
	*/
	template<class R, class... Us> class rv_optional_aggregate_operator : public rv_abstract_operator
		, public mixins::inputs<boost::optional<Us>...>
		, public mixins::output<R>
	{
	public:
		rv_optional_aggregate_operator()
		{
		}
	private:
		const std::function<R(boost::optional<Us>...)> _function;
	};

	/*
	*	- map
	*/
	template<class R, class T> class rv_map_operator : public rv_abstract_operator
		, public mixins::inputs<T>
		, public mixins::output<R>
	{
	public:
		rv_map_operator(std::function<R(T)> function_) : _function { std::move(function_) } { }

		void wake_up() override
		{
			// map R =? T
			auto val = _function(_get());
			_send(std::move(val));
		}
	private:
		const std::function<R(T)> _function;
	};

	/*
	*	- filter, R=T
	*/
	template<class T> class rv_filter_operator : public rv_abstract_operator
		, public mixins::inputs<T>
		, public mixins::output<T>
	{
	public:
		rv_filter_operator(std::function<bool(T)> function_) : _function{ std::move(function_) } { }

		void wake_up() override
		{
			// filter R == T
			auto val = _get();
			bool keep = _function(val);
			if (keep)
			{
				_send(std::move(val));
			}
		}
	private:
		const std::function<bool(T)> _function;
	};



	/*
	*	c = a ? *a : b; // get_or(), R = T = U
	*/
	template<class R, class T, class U> class rv_hybrid_binary_operator : public rv_abstract_operator
		, public mixins::inputs<boost::optional<T>, U>
		, public mixins::output<R>
	{
	public:
	private:
		const std::function<R(boost::optional<T>, U)> _function;
	};

	/*
	*
	*/
	template<class T> class underlying_rv
	{
	public:
		underlying_rv(rv<T>& host_rv_) : _host_rv { host_rv_ } { }

		void operator << (boost::optional<T> value_)
		{
			_value.swap(value_);

			// debugger
			if (_ptr_rc)
			{
				_ptr_rc->debugger().notify(E_DEBUGGER_EVENT::NODE_VALUE_CHANGED, *this, _value);
			}

			if(_value)
			{
				_host_rv.notify();

				for(auto& out : _outputs)
				{
					_ptr_rc->thread_pool().submit([=]
					{
						out->wake_up();
					});
				}
			}
		}

		void assign(rv_context& rc_)
		{
			_ptr_rc = &rc_;
		}

		void assign(std::shared_ptr<rv_abstract_operator> operator_)
		{
			_outputs.push_back(std::move(operator_));
		}

		void operator >> (T& value_)
		{
			value_ = *_value;
		}

		const boost::optional<T>& value() const
		{
			return _value;
		}

		std::string name() const
		{
			return _host_rv.name();
		}

	private:
		boost::optional<T> _value;
		std::vector<std::shared_ptr<rv_abstract_operator>> _outputs;
		// host rv always exists and holds this rv implementation
		rv<T>& _host_rv;
		rv_context* _ptr_rc = nullptr;
	};


	/*
		forward chainging:
		
		node:a -> op:foreach -> nil
	
		node:a -> op:map ->		node:c
		node:b -> +
	*/

	template<class T> class rv
	{
	public:
		rv() = default;

		rv(rv_builder& builder_)
		{
			builder_.into(*this);
		}

		rv& operator<<(T t_)
		{
			*_ptr_impl << t_;

			return *this;
		}

		void subscribe(std::function<void(T)> callback_)
		{
			_subscribes.push_back(std::move(callback_));
		}

		void notify()
		{
			if (_ptr_impl->value())
			{
				for(auto& f : _subscribes)
				{
					f(*_ptr_impl->value());
				}
			}
		}

		void set_name(std::string name_)
		{
			_name.swap(name_);
		}

		std::string name() const
		{
			return _name;
		}

	//private:
		std::shared_ptr<underlying_rv<T>> _ptr_impl = std::make_shared<underlying_rv<T>>(*this);

		std::vector<std::function<void(T)>> _subscribes;

		std::string _name { generate_name(*this) };
	};





	class rv_builder
	{
	public:
		rv_builder(rv_context& rc_, std::shared_ptr<rv_abstract_operator> ptr_op_)
			: _rc { rc_ }
			, _current_operator { std::move(ptr_op_) }
		{
		}

		template<class T> rv_builder into(rv<T>& target_)
		{
			auto output = dynamic_pointer_cast<mixins::output<T>>(_current_operator);

			if (output)
			{
				_rc.debugger().add_edge(*_current_operator, *target_._ptr_impl);
				target_._ptr_impl->assign(_rc);
				output->set_output(target_._ptr_impl);
			}

			return *this;
		}

	private:
		std::shared_ptr<rv_abstract_operator> _current_operator;
		rv_context& _rc;
	};




	class rv_context
	{
	public:
		rv_context();

		template<class T> rv_builder from(rv<T> rv_)
		{
			return { };
		}

		template<class F, class... Ts> rv_builder map(F func_, rv<Ts>... rvs_)
		{
			auto func = utility::as_std_function(func_);

			return map(std::move(func), std::move(rvs_)...);
		}

		template<class R, class... Ts> rv_builder map(std::function<R(Ts...)> func_, rv<Ts>... rvs_)
		{
			auto op = std::make_shared<rv_aggregate_operator<R, Ts...>>(std::move(func_), std::make_tuple(rvs_._ptr_impl...));

			utility::for_each(std::make_tuple(rvs_._ptr_impl ...), [=](auto ptr_)
			{
				_debugger.add_edge(*ptr_, *op);
				ptr_->assign(op);
				ptr_->assign(*this);
			});

			return { *this, op };
		}

		rv_debugger& debugger();

		utility::thread_pool& thread_pool();

	private:
		//	1st - allocation 
		//	2nd - deallocation - make sure no other thread keep locked its mutex
		rv_debugger _debugger;

		//	2nd - allocation
		//	1st - deallocation - terminate running threads
		utility::thread_pool _thread_pool;
	};
}
